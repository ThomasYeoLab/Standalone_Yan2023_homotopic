function CBIG_hMRF_check_example_results(output_dir)
% CBIG_hMRF_check_example_results(output_dir)
%
% This script is used to compare the example results generated by user with the reference results.
%
% Input:
%   - out_dir:
%     The output_directory that saves the example results generated by the user.
%
% Example:
%   CBIG_hMRF_check_example_results('./output_folder')
%
% Written by Xiaoxuan Yan and CBIG under MIT license: https://github.com/ThomasYeoLab/CBIG/blob/master/LICENSE.md

CBIG_CODE_DIR = getenv('CBIG_CODE_DIR');
ref_results_dir = fullfile(CBIG_CODE_DIR, 'stable_projects', 'brain_parcellation', 'Yan2023_homotopic',...
    'examples', 'ref_results');

%% step 1: check if normalized time courses are accurate
% lh
load(fullfile(ref_results_dir, 'time_data', 'lh_time_matrix_partial.mat'), 'lh_time_mat_partial');
lh_ref_time_course = lh_time_mat_partial;

lh_user_time_course_dir = fullfile(output_dir, 'time_data', 'lh_time_matrix.mat');
assert(logical(exist(lh_user_time_course_dir, 'file')),...
'User failed to generate left hemisphere concatenated time courses.');
load(lh_user_time_course_dir, 'lh_time_mat');
lh_user_time_course = lh_time_mat(:, 1:20);
lh_time_course_mean_diff = mean(abs(lh_user_time_course(:) - lh_ref_time_course(:)));

% rh
load(fullfile(ref_results_dir, 'time_data', 'rh_time_matrix_partial.mat'), 'rh_time_mat_partial');
rh_ref_time_course = rh_time_mat_partial;

rh_user_time_course_dir = fullfile(output_dir, 'time_data', 'rh_time_matrix.mat');
assert(logical(exist(rh_user_time_course_dir, 'file')),...
'User failed to generate left hemisphere concatenated time courses.');
load(rh_user_time_course_dir, 'rh_time_mat');
rh_user_time_course = rh_time_mat(:, 1:20);
rh_time_course_mean_diff = mean(abs(rh_user_time_course(:) - rh_ref_time_course(:)));

if(lh_time_course_mean_diff <= 1e-5 && rh_time_course_mean_diff <= 1e-5)
    disp('Successfully generated left and right hemisphere time courses and your result matched ours.');
else
    disp('FAIL!')
    disp('The mean difference between your results and reference results is ...');
    disp(['Left hemisphere time courses difference: ' num2str(lh_time_course_mean_diff)]);
    disp(['Right hemisphere time courses difference: ' num2str(rh_time_course_mean_diff)]);
end

%% step 2: check if resultant premultiplied matrices would match
load(fullfile(ref_results_dir, 'premultiplied_matrix_partial.mat'), 'final_PMM_partial');
ref_pmm = final_PMM_partial;

user_pmm_dir = fullfile(output_dir, 'premultiplied_matrix_single.mat');
assert(logical(exist(user_pmm_dir, 'file')), 'User failed to generate premultiplied matrix.');
load(user_pmm_dir, 'final_PMM');
user_pmm = final_PMM(1:20, :);

pmm_mean_diff = mean(abs(user_pmm(:) - ref_pmm(:)));
if(pmm_mean_diff <= 1e-5)
    disp('Successfully generated premultipled matrix and your result matched ours.');
else
    disp('FAIL!')
    disp('The mean difference between your results and reference results is ...');
    disp(['Partial premultiplied matrices difference: ' num2str(pmm_mean_diff)]);
end


%% step 3: check if resultant parcellation is matched
load(fullfile(ref_results_dir, 'parcellation_seed_835',...
    '100parcels_C1.0e+02_K15_Wxyz1.5e+03_D10_A1_iterations_3_seed_835.mat'), 'results');
ref_label = results.full_label;

user_label_dir = fullfile(output_dir, 'parcellation', 'results',...
'100parcels_C1.0e+02_K15_Wxyz1.5e+03_D10_A1_iterations_3_seed_835.mat');
assert(logical(exist(user_label_dir, 'file')), 'User failed to generate parcellation labels.');
load(user_label_dir, 'results');
user_label = results.full_label;

total_label_diff_count = sum(ref_label ~= user_label);
if(total_label_diff_count < 10) % there might be minor differences due to running environment
    disp('Successfully generated the level 100 parcellation and your result matched ours.');
else
    disp('FAIL!')
    disp(['The total number of different labels between the user and reference labels is '...
        num2str(total_label_diff_count)]);
end

end


    

